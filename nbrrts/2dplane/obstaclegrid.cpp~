#include <2dplane/obstaclegrid.h>
#include <stdlib.h>
#include <iostream>
#include <QDebug>

using namespace Eigen;
using namespace std;


ObstacleGrid::ObstacleGrid(float width, float height, int discretizedWidth, int discretizedHeight) {
    _width = width;
    _height = height;
    _discretizedWidth = discretizedWidth;
    _discretizedHeight = discretizedHeight;

    _obstacles = (bool *)malloc(sizeof(bool) * discretizedWidth * discretizedHeight);

    clear();
}

ObstacleGrid::~ObstacleGrid() {
    free(_obstacles);
}

Vector2i ObstacleGrid::gridSquareForLocation(const Vector2f &loc) const {
    return Vector2i(loc.x() / width() * discretizedWidth(),
                    loc.y() / height() * discretizedHeight());
}

float ObstacleGrid::nearestObstacleDist(const Vector2f &state, float maxDist) const {
    //x and y are the indices of the cell that state is located in
    float x = (state.x() / (_width / _discretizedWidth));
    float y = (state.y() / (_height / _discretizedHeight));
    int xSearchRad = maxDist * _discretizedWidth / _width;
    int ySearchRad = maxDist * _discretizedHeight / _height;
    
    //here we loop through the cells around (x,y) to find the minimum distance of the point to the nearest obstacle
    for (int i = x - xSearchRad; i <= x + xSearchRad; i++) {
        for (int j = y - ySearchRad; j <= y + ySearchRad; j++) {
            bool obs = obstacleAt(i, j);
            if (obs) {
                float xDist = (x-i)*_width / _discretizedWidth;
                float yDist = (y-j)*_height / _discretizedHeight;
                if(x > i + 1) 
                    xDist -= _width / _discretizedWidth;
                else if(x > i)
                    xDist = 0.0;
                if(y > j + 1) 
                    yDist -= _height / _discretizedHeight;
                else if(y > j)
                    yDist = 0.0;
                float dist = sqrtf(powf(xDist, 2) + powf(yDist, 2));
                if (dist < maxDist) {
                    maxDist = dist;
                }
            }
        }
    }

    // the boundaries of the grid count as obstacles
    maxDist = std::min(maxDist, state.x());               // left boundary
    maxDist = std::min(maxDist, width() - state.x());     // right boundary
    maxDist = std::min(maxDist, state.y());               // top boundary
    maxDist = std::min(maxDist, height() - state.y());    // bottom boundary

    return maxDist;
}

/*std::vector<Vector2f> ObstacleGrid::nearObstacle(Vector2f state, float maxDist) {
    std::vector<Vector2f> _nearObstacle;
    //x and y are the indices of the cell that state is located in
    float x = (state.x() / (_width / _discretizedWidth));
    float y = (state.y() / (_height / _discretizedHeight));
    int xSearchRad = maxDist * _discretizedWidth / _width;
    int ySearchRad = maxDist * _discretizedHeight / _height;
    //here we loop through the cells around (x,y) to find the minimum distance of the point to the nearest obstacle
    for (int i = x - xSearchRad; i <= x + xSearchRad; i++) {
        for (int j = y - ySearchRad; j <= y + ySearchRad; j++) {
            bool obs = obstacleAt(i, j);
            if (obs) {
                float xDist = (x-i)*_width / _discretizedWidth;
                float yDist = (y-j)*_height / _discretizedHeight;
                if(x > i + 1) 
                    xDist -= _width / _discretizedWidth;
                else if(x > i)
                    xDist = 0.0;
                if(y > j + 1) 
                    yDist -= _height / _discretizedHeight;
                else if(y > j)
                    yDist = 0.0;
                Vector2f obstable(x*_width / _discretizedWidth - xDist, y*_height / _discretizedHeight - yDist);
                _nearObstacle.push_back(obstable);
                float dist = sqrtf(powf(xDist, 2) + powf(yDist, 2));
                if (dist < maxDist) {
                    maxDist = dist;
                }
            }
        }
    }
    
    if(maxDist > state.x()) {
        Vector2f obstable(0, state.y());
        _nearObstacle.push_back(obstable);
        maxDist = state.x();
    }
    if(maxDist > (width() - state.x())) {
        Vector2f obstable(width(), state.y());
        _nearObstacle.push_back(obstable);
        maxDist = (width() - state.x());
    }
    if(maxDist > state.y()) {
        Vector2f obstable(state.x(), 0);
        _nearObstacle.push_back(obstable);
        maxDist = state.y();
    }
    if(maxDist > (height() - state.y())) {
        Vector2f obstable(state.x(), height());
        _nearObstacle.push_back(obstable);
        maxDist = (height() - state.y());
    }
    return _nearObstacle;
}*/

int *ObstacleGrid::nearObstacle(const Vector2f &state, float maxDist) {
    //x and y are the indices of the cell that state is located in
    
    float x = (state.x() / (_width / _discretizedWidth));
    float y = (state.y() / (_height / _discretizedHeight));
    int xSearchRad = maxDist * _discretizedWidth / _width;
    int ySearchRad = maxDist * _discretizedHeight / _height;
    int *_inform = new int[8];
    //qDebug()<<ySearchRad;
    //qDebug()<<xSearchRad;
    //here we loop through the cells around (x,y) to find the minimum distance of the point to the nearest obstacle
    int m = 0;
    int n = 0;
    for (int j = y - ySearchRad; j <= y + ySearchRad; j++) {
        for (int i = x - xSearchRad; i <= x + xSearchRad; i++) {
            if (n != 4) {
                bool obs = obstacleAt(i, j);
                if (obs) 
                    *(_inform + m) = 1;
                else 
                    *(_inform + m) = 0;
                m++;
            }
            n++;
        }
    }
    //qDebug()<<m;

    // the boundaries of the grid count as obstacles
    if((_width / _discretizedWidth) >= state.x()) {
        *(_inform + 0) = 1;
        *(_inform + 3) = 1;
        *(_inform + 5) = 1;
    }
    if((_width / _discretizedWidth) >= (width() - state.x())) {
        *(_inform + 2) = 1;
        *(_inform + 4) = 1;
        *(_inform + 7) = 1;
    }
    if((_height / _discretizedHeight) >= state.y()) {
        *(_inform + 0) = 1;
        *(_inform + 1) = 1;
        *(_inform + 2) = 1;
    }
    if((_height / _discretizedHeight) >= (height() - state.y())) {
        *(_inform + 5) = 1;
        *(_inform + 6) = 1;
        *(_inform + 7) = 1;
    }
    
    qDebug()<<*(_inform + 0)<<" "<<*(_inform + 1)<<" "<<*(_inform + 2)<<" "<<*(_inform + 3)<<" "<<*(_inform + 4)<<" "<<*(_inform + 5)<<" "<<*(_inform + 6)<<" "<<*(_inform + 7);

    return _inform;
}

std::vector<Eigen::Vector2f> ObstacleGrid::intermediateStates(const Eigen::Vector2f state, const int *inform) {
    vector<Vector2f> intermediateStates;
    int x = (state.x() / (_width / _discretizedWidth));
    int y = (state.y() / (_height / _discretizedHeight));
    for(int i = 0; i < 8; i++) {
        
        if(*(inform+i) == 0) {
            Vector2f rd(drand48() * (_width / _discretizedWidth), drand48() * (_height / _discretizedHeight));
            float x0, y0;
            switch(i) {
                case 0: {
                    x0 = (x - 1) * (_width / _discretizedWidth);
                    y0 = (y - 1) * (_height / _discretizedHeight);
                    break;
                }
                case 1: {
                    x0 = x * (_width / _discretizedWidth);
                    y0 = (y - 1) * (_height / _discretizedHeight);
                    break;
                }
                case 2: {
                    x0 = (x + 1) * (_width / _discretizedWidth);
                    y0 = (y - 1) * (_height / _discretizedHeight);
                    break;
                }
                case 3: {
                    x0 = (x - 1) * (_width / _discretizedWidth);
                    y0 = y * (_height / _discretizedHeight);
                    break;
                }
                case 4: {
                    x0 = (x + 1) * (_width / _discretizedWidth);
                    y0 = y * (_height / _discretizedHeight);
                    break;
                }
                case 5: {
                    x0 = (x - 1) * (_width / _discretizedWidth);
                    y0 = (y + 1) * (_height / _discretizedHeight);
                    break;
                }
                case 6: {
                    x0 = x * (_width / _discretizedWidth);
                    y0 = (y + 1) * (_height / _discretizedHeight);
                    break;
                }
                case 7: {
                    x0 = (x + 1) * (_width / _discretizedWidth);
                    y0 = (y + 1) * (_height / _discretizedHeight);
                    break;
                }
            }
            Vector2f xd(x0, y0);
            Vector2f intermediateState = xd + rd;
            intermediateStates.push_back(intermediateState);
        }
    }
    //qDebug()<<intermediateStates.size();
    return intermediateStates;
}

int ObstacleGrid::getRelativePosition(const Eigen::Vector2f &state, const Eigen::Vector2f &to) {
    int xState = (state.x() / (_width / _discretizedWidth));
    int yState = (state.y() / (_height / _discretizedHeight));
    int xTo = (to.x() / (_width / _discretizedWidth));
    int yTo = (to.y() / (_height / _discretizedHeight));
    if(yState > yTo) {
        if(xState > xTo)
            return 0;
        else if(xState == xTo)
            return 1;
        else
            return 2;
    }
    else if(yState == yTo) {
        if(xState > xTo)
            return 3;
        else if(xState < xTo)
            return 4;
    }
    else {
        if(xState > xTo)
            return 5;
        else if(xState == xTo)
            return 6;
        else
            return 7;
    }
    return 8;
}

int ObstacleGrid::getLocationDest(const Eigen::Vector2f &state, int initW, int initH) {
    return (int(state.y()) / initH * (_width / initW) + int(state.x()) / initW);
}


void ObstacleGrid::clear() {
    for (int x = 0; x < discretizedWidth(); x++) {
        for (int y = 0; y < discretizedHeight(); y++) {
            obstacleAt(x, y) = false;
        }
    }
}

bool &ObstacleGrid::obstacleAt(int x, int y) {
    return _obstacles[x + _discretizedWidth*y];
}

bool ObstacleGrid::obstacleAt(int x, int y) const {
    return _obstacles[x + _discretizedWidth*y];
}

bool &ObstacleGrid::obstacleAt(const Vector2i &gridLoc) {
    return obstacleAt(gridLoc.x(), gridLoc.y());
}

bool ObstacleGrid::obstacleAt(const Vector2i &gridLoc) const {
    return obstacleAt(gridLoc.x(), gridLoc.y());
}

int ObstacleGrid::discretizedWidth() const {
    return _discretizedWidth;
}

int ObstacleGrid::discretizedHeight() const {
    return _discretizedHeight;
}

float ObstacleGrid::width() const {
    return _width;
}

float ObstacleGrid::height() const {
    return _height;
}

